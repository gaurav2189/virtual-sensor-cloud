import { TimeStruct } from "./basics";
import { DateFunctions } from "./javascript";
import { NormalizeOption } from "./tz-database";
/**
 * The local time zone for a given date as per OS settings. Note that time zones are cached
 * so you don't necessarily get a new object each time.
 */
export declare function local(): TimeZone;
/**
 * Coordinated Universal Time zone. Note that time zones are cached
 * so you don't necessarily get a new object each time.
 */
export declare function utc(): TimeZone;
/**
 * @param offset offset w.r.t. UTC in minutes, e.g. 90 for +01:30. Note that time zones are cached
 * so you don't necessarily get a new object each time.
 * @returns a time zone with the given fixed offset
 */
export declare function zone(offset: number): TimeZone;
/**
 * Time zone for an offset string or an IANA time zone string. Note that time zones are cached
 * so you don't necessarily get a new object each time.
 * @param s Empty string for no time zone (null is returned),
 *          "localtime" for local time,
 *          a TZ database time zone name (e.g. Europe/Amsterdam),
 *          or an offset string (either +01:30, +0130, +01, Z). For a full list of names, see:
 *          https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
 * @param dst	Optional, default true: adhere to Daylight Saving Time if applicable. Note for
 *              "localtime", timezonecomplete will adhere to the computer settings, the DST flag
 *              does not have any effect.
 */
export declare function zone(name: string, dst?: boolean): TimeZone;
/**
 * The type of time zone
 */
export declare enum TimeZoneKind {
    /**
     * Local time offset as determined by JavaScript Date class.
     */
    Local = 0,
    /**
     * Fixed offset from UTC, without DST.
     */
    Offset = 1,
    /**
     * IANA timezone managed through Olsen TZ database. Includes
     * DST if applicable.
     */
    Proper = 2,
}
/**
 * Time zone. The object is immutable because it is cached:
 * requesting a time zone twice yields the very same object.
 * Note that we use time zone offsets inverted w.r.t. JavaScript Date.getTimezoneOffset(),
 * i.e. offset 90 means +01:30.
 *
 * Time zones come in three flavors: the local time zone, as calculated by JavaScript Date,
 * a fixed offset ("+01:30") without DST, or a IANA timezone ("Europe/Amsterdam") with DST
 * applied depending on the time zone rules.
 */
export declare class TimeZone {
    /**
     * Time zone identifier:
     *  "localtime" string for local time
     *  E.g. "-01:30" for a fixed offset from UTC
     *  E.g. "UTC" or "Europe/Amsterdam" for an Olsen TZ database time
     */
    private _name;
    /**
     * Adhere to Daylight Saving Time if applicable
     */
    private _dst;
    /**
     * The kind of time zone specified by _name
     */
    private _kind;
    /**
     * Only for fixed offsets: the offset in minutes
     */
    private _offset;
    /**
     * The local time zone for a given date. Note that
     * the time zone varies with the date: amsterdam time for
     * 2014-01-01 is +01:00 and amsterdam time for 2014-07-01 is +02:00
     */
    static local(): TimeZone;
    /**
     * The UTC time zone.
     */
    static utc(): TimeZone;
    /**
     * Time zone with a fixed offset
     * @param offset	offset w.r.t. UTC in minutes, e.g. 90 for +01:30
     */
    static zone(offset: number): TimeZone;
    /**
     * Time zone for an offset string or an IANA time zone string. Note that time zones are cached
     * so you don't necessarily get a new object each time.
     * @param s Empty string for no time zone (null is returned),
     *          "localtime" for local time,
     *          a TZ database time zone name (e.g. Europe/Amsterdam),
     *          or an offset string (either +01:30, +0130, +01, Z). For a full list of names, see:
     *          https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
     *          TZ database zone name may be suffixed with " without DST" to indicate no DST should be applied.
     *          In that case, the dst parameter is ignored.
     * @param dst	Optional, default true: adhere to Daylight Saving Time if applicable. Note for
     *              "localtime", timezonecomplete will adhere to the computer settings, the DST flag
     *              does not have any effect.
     */
    static zone(s: string, dst?: boolean): TimeZone;
    /**
     * Do not use this constructor, use the static
     * TimeZone.zone() method instead.
     * @param name NORMALIZED name, assumed to be correct
     * @param dst	Adhere to Daylight Saving Time if applicable, ignored for local time and fixed offsets
     */
    private constructor(name, dst?);
    /**
     * Makes this class appear clonable. NOTE as time zone objects are cached you will NOT
     * actually get a clone but the same object.
     */
    clone(): TimeZone;
    /**
     * The time zone identifier. Can be an offset "-01:30" or an
     * IANA time zone name "Europe/Amsterdam", or "localtime" for
     * the local time zone.
     */
    name(): string;
    dst(): boolean;
    /**
     * The kind of time zone (Local/Offset/Proper)
     */
    kind(): TimeZoneKind;
    /**
     * Equality operator. Maps zero offsets and different names for UTC onto
     * each other. Other time zones are not mapped onto each other.
     */
    equals(other: TimeZone): boolean;
    /**
     * Returns true iff the constructor arguments were identical, so UTC !== GMT
     */
    identical(other: TimeZone): boolean;
    /**
     * Is this zone equivalent to UTC?
     */
    isUtc(): boolean;
    /**
     * Does this zone have Daylight Saving Time at all?
     */
    hasDst(): boolean;
    /**
     * Calculate timezone offset including DST from a UTC time.
\	 * @return the offset of this time zone with respect to UTC at the given time, in minutes.
     */
    offsetForUtc(offsetForUtc: TimeStruct): number;
    offsetForUtc(year?: number, month?: number, day?: number, hour?: number, minute?: number, second?: number, milli?: number): number;
    /**
     * Calculate timezone standard offset excluding DST from a UTC time.
     * @return the standard offset of this time zone with respect to UTC at the given time, in minutes.
     */
    standardOffsetForUtc(offsetForUtc: TimeStruct): number;
    standardOffsetForUtc(year?: number, month?: number, day?: number, hour?: number, minute?: number, second?: number, milli?: number): number;
    /**
     * Calculate timezone offset from a zone-local time (NOT a UTC time).
     * @param year local full year
     * @param month local month 1-12 (note this deviates from JavaScript date)
     * @param day local day of month 1-31
     * @param hour local hour 0-23
     * @param minute local minute 0-59
     * @param second local second 0-59
     * @param millisecond local millisecond 0-999
     * @return the offset of this time zone with respect to UTC at the given time, in minutes.
     */
    offsetForZone(localTime: TimeStruct): number;
    offsetForZone(year?: number, month?: number, day?: number, hour?: number, minute?: number, second?: number, milli?: number): number;
    /**
     * Note: will be removed in version 2.0.0
     *
     * Convenience function, takes values from a Javascript Date
     * Calls offsetForUtc() with the contents of the date
     *
     * @param date: the date
     * @param funcs: the set of functions to use: get() or getUTC()
     */
    offsetForUtcDate(date: Date, funcs: DateFunctions): number;
    /**
     * Note: will be removed in version 2.0.0
     *
     * Convenience function, takes values from a Javascript Date
     * Calls offsetForUtc() with the contents of the date
     *
     * @param date: the date
     * @param funcs: the set of functions to use: get() or getUTC()
     */
    offsetForZoneDate(date: Date, funcs: DateFunctions): number;
    /**
     * Zone abbreviation at given UTC timestamp e.g. CEST for Central European Summer Time.
     *
     * @param year Full year
     * @param month Month 1-12 (note this deviates from JavaScript date)
     * @param day Day of month 1-31
     * @param hour Hour 0-23
     * @param minute Minute 0-59
     * @param second Second 0-59
     * @param millisecond Millisecond 0-999
     * @param dstDependent (default true) set to false for a DST-agnostic abbreviation
     *
     * @return "local" for local timezone, the offset for an offset zone, or the abbreviation for a proper zone.
     */
    abbreviationForUtc(year?: number, month?: number, day?: number, hour?: number, minute?: number, second?: number, milli?: number, dstDependent?: boolean): string;
    abbreviationForUtc(utcTime: TimeStruct, dstDependent?: boolean): string;
    /**
     * Normalizes non-existing local times by adding a forward offset change.
     * During a forward standard offset change or DST offset change, some amount of
     * local time is skipped. Therefore, this amount of local time does not exist.
     * This function adds the amount of forward change to any non-existing time. After all,
     * this is probably what the user meant.
     *
     * @param localTime	zone time timestamp as unix milliseconds
     * @param opt	(optional) Round up or down? Default: up
     *
     * @returns	unix milliseconds in zone time, normalized.
     */
    normalizeZoneTime(localUnixMillis: number, opt?: NormalizeOption): number;
    /**
     * Normalizes non-existing local times by adding a forward offset change.
     * During a forward standard offset change or DST offset change, some amount of
     * local time is skipped. Therefore, this amount of local time does not exist.
     * This function adds the amount of forward change to any non-existing time. After all,
     * this is probably what the user meant.
     *
     * @param localTime	zone time timestamp
     * @param opt	(optional) Round up or down? Default: up
     *
     * @returns	time struct in zone time, normalized.
     */
    normalizeZoneTime(localTime: TimeStruct, opt?: NormalizeOption): TimeStruct;
    /**
     * The time zone identifier (normalized).
     * Either "localtime", IANA name, or "+hh:mm" offset.
     */
    toString(): string;
    /**
     * Used by util.inspect()
     */
    inspect(): string;
    /**
     * Convert an offset number into an offset string
     * @param offset The offset in minutes from UTC e.g. 90 minutes
     * @return the offset in ISO notation "+01:30" for +90 minutes
     */
    static offsetToString(offset: number): string;
    /**
     * String to offset conversion.
     * @param s	Formats: "-01:00", "-0100", "-01", "Z"
     * @return offset w.r.t. UTC in minutes
     */
    static stringToOffset(s: string): number;
    /**
     * Time zone cache.
     */
    private static _cache;
    /**
     * Find in cache or create zone
     * @param name	Time zone name
     * @param dst	Adhere to Daylight Saving Time?
     */
    private static _findOrCreate(name, dst);
    /**
     * Normalize a string so it can be used as a key for a
     * cache lookup
     */
    private static _normalizeString(s);
    private static _isOffsetString(s);
}
