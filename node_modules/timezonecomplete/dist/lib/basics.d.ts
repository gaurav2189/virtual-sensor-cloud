import { DateFunctions } from "./javascript";
/**
 * Used for methods that take a timestamp as separate year/month/... components
 */
export interface TimeComponentOpts {
    /**
     * Year, default 1970
     */
    year?: number;
    /**
     * Month 1-12, default 1
     */
    month?: number;
    /**
     * Day of month 1-31, default 1
     */
    day?: number;
    /**
     * Hour of day 0-23, default 0
     */
    hour?: number;
    /**
     * Minute 0-59, default 0
     */
    minute?: number;
    /**
     * Second 0-59, default 0
     */
    second?: number;
    /**
     * Millisecond 0-999, default 0
     */
    milli?: number;
}
/**
 * Timestamp represented as separate year/month/... components
 */
export interface TimeComponents {
    /**
     * Year
     */
    year: number;
    /**
     * Month 1-12
     */
    month: number;
    /**
     * Day of month 1-31
     */
    day: number;
    /**
     * Hour 0-23
     */
    hour: number;
    /**
     * Minute
     */
    minute: number;
    /**
     * Second
     */
    second: number;
    /**
     * Millisecond 0-999
     */
    milli: number;
}
/**
 * Day-of-week. Note the enum values correspond to JavaScript day-of-week:
 * Sunday = 0, Monday = 1 etc
 */
export declare enum WeekDay {
    Sunday = 0,
    Monday = 1,
    Tuesday = 2,
    Wednesday = 3,
    Thursday = 4,
    Friday = 5,
    Saturday = 6,
}
/**
 * Time units
 */
export declare enum TimeUnit {
    Millisecond = 0,
    Second = 1,
    Minute = 2,
    Hour = 3,
    Day = 4,
    Week = 5,
    Month = 6,
    Year = 7,
    /**
     * End-of-enum marker, do not use
     */
    MAX = 8,
}
/**
 * Approximate number of milliseconds for a time unit.
 * A day is assumed to have 24 hours, a month is assumed to equal 30 days
 * and a year is set to 360 days (because 12 months of 30 days).
 *
 * @param unit	Time unit e.g. TimeUnit.Month
 * @returns	The number of milliseconds.
 */
export declare function timeUnitToMilliseconds(unit: TimeUnit): number;
/**
 * Time unit to lowercase string. If amount is specified, then the string is put in plural form
 * if necessary.
 * @param unit The unit
 * @param amount If this is unequal to -1 and 1, then the result is pluralized
 */
export declare function timeUnitToString(unit: TimeUnit, amount?: number): string;
export declare function stringToTimeUnit(s: string): TimeUnit;
/**
 * @return True iff the given year is a leap year.
 */
export declare function isLeapYear(year: number): boolean;
/**
 * The days in a given year
 */
export declare function daysInYear(year: number): number;
/**
 * @param year	The full year
 * @param month	The month 1-12
 * @return The number of days in the given month
 */
export declare function daysInMonth(year: number, month: number): number;
/**
 * Returns the day of the year of the given date [0..365]. January first is 0.
 *
 * @param year	The year e.g. 1986
 * @param month Month 1-12
 * @param day Day of month 1-31
 */
export declare function dayOfYear(year: number, month: number, day: number): number;
/**
 * Returns the last instance of the given weekday in the given month
 *
 * @param year	The year
 * @param month	the month 1-12
 * @param weekDay	the desired week day
 *
 * @return the last occurrence of the week day in the month
 */
export declare function lastWeekDayOfMonth(year: number, month: number, weekDay: WeekDay): number;
/**
 * Returns the first instance of the given weekday in the given month
 *
 * @param year	The year
 * @param month	the month 1-12
 * @param weekDay	the desired week day
 *
 * @return the first occurrence of the week day in the month
 */
export declare function firstWeekDayOfMonth(year: number, month: number, weekDay: WeekDay): number;
/**
 * Returns the day-of-month that is on the given weekday and which is >= the given day.
 * Throws if the month has no such day.
 */
export declare function weekDayOnOrAfter(year: number, month: number, day: number, weekDay: WeekDay): number;
/**
 * Returns the day-of-month that is on the given weekday and which is <= the given day.
 * Throws if the month has no such day.
 */
export declare function weekDayOnOrBefore(year: number, month: number, day: number, weekDay: WeekDay): number;
/**
 * The week of this month. There is no official standard for this,
 * but we assume the same rules for the weekNumber (i.e.
 * week 1 is the week that has the 4th day of the month in it)
 *
 * @param year The year
 * @param month The month [1-12]
 * @param day The day [1-31]
 * @return Week number [1-5]
 */
export declare function weekOfMonth(year: number, month: number, day: number): number;
/**
 * The ISO 8601 week number for the given date. Week 1 is the week
 * that has January 4th in it, and it starts on Monday.
 * See https://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param year	Year e.g. 1988
 * @param month	Month 1-12
 * @param day	Day of month 1-31
 *
 * @return Week number 1-53
 */
export declare function weekNumber(year: number, month: number, day: number): number;
/**
 * Convert a unix milli timestamp into a TimeT structure.
 * This does NOT take leap seconds into account.
 */
export declare function unixToTimeNoLeapSecs(unixMillis: number): TimeComponents;
/**
 * Convert a year, month, day etc into a unix milli timestamp.
 * This does NOT take leap seconds into account.
 *
 * @param year	Year e.g. 1970
 * @param month	Month 1-12
 * @param day	Day 1-31
 * @param hour	Hour 0-23
 * @param minute	Minute 0-59
 * @param second	Second 0-59 (no leap seconds)
 * @param milli	Millisecond 0-999
 */
export declare function timeToUnixNoLeapSecs(year: number, month: number, day: number, hour: number, minute: number, second: number, milli: number): number;
export declare function timeToUnixNoLeapSecs(components: TimeComponentOpts): number;
/**
 * Return the day-of-week.
 * This does NOT take leap seconds into account.
 */
export declare function weekDayNoLeapSecs(unixMillis: number): WeekDay;
/**
 * N-th second in the day, counting from 0
 */
export declare function secondOfDay(hour: number, minute: number, second: number): number;
/**
 * Basic representation of a date and time
 */
export declare class TimeStruct {
    /**
     * Returns a TimeStruct from the given year, month, day etc
     *
     * @param year	Year e.g. 1970
     * @param month	Month 1-12
     * @param day	Day 1-31
     * @param hour	Hour 0-23
     * @param minute	Minute 0-59
     * @param second	Second 0-59 (no leap seconds)
     * @param milli	Millisecond 0-999
     */
    static fromComponents(year?: number, month?: number, day?: number, hour?: number, minute?: number, second?: number, milli?: number): TimeStruct;
    /**
     * Create a TimeStruct from a number of unix milliseconds
     * (backward compatibility)
     */
    static fromUnix(unixMillis: number): TimeStruct;
    /**
     * Create a TimeStruct from a JavaScript date
     *
     * @param d	The date
     * @param df	Which functions to take (getX() or getUTCX())
     */
    static fromDate(d: Date, df: DateFunctions): TimeStruct;
    /**
     * Returns a TimeStruct from an ISO 8601 string WITHOUT time zone
     */
    static fromString(s: string): TimeStruct;
    /**
     * The time value in unix milliseconds
     */
    private _unixMillis;
    readonly unixMillis: number;
    /**
     * The time value in separate year/month/... components
     */
    private _components;
    readonly components: TimeComponents;
    /**
     * Constructor
     *
     * @param unixMillis milliseconds since 1-1-1970
     */
    constructor(unixMillis: number);
    /**
     * Constructor
     *
     * @param components Separate timestamp components (year, month, ...)
     */
    constructor(components: TimeComponentOpts);
    readonly year: number;
    readonly month: number;
    readonly day: number;
    readonly hour: number;
    readonly minute: number;
    readonly second: number;
    readonly milli: number;
    /**
     * The day-of-year 0-365
     */
    yearDay(): number;
    equals(other: TimeStruct): boolean;
    valueOf(): number;
    clone(): TimeStruct;
    /**
     * Validate a timestamp. Filters out non-existing values for all time components
     * @returns true iff the timestamp is valid
     */
    validate(): boolean;
    /**
     * ISO 8601 string YYYY-MM-DDThh:mm:ss.nnn
     */
    toString(): string;
    inspect(): string;
}
/**
 * Binary search
 * @param array Array to search
 * @param compare Function that should return < 0 if given element is less than searched element etc
 * @return {Number} The insertion index of the element to look for
 */
export declare function binaryInsertionIndex<T>(arr: T[], compare?: (a: T) => number): number;
