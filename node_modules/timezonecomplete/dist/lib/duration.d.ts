import { TimeUnit } from "./basics";
/**
 * Construct a time duration
 * @param n	Number of years (may be fractional or negative)
 * @return A duration of n years
 */
export declare function years(n: number): Duration;
/**
 * Construct a time duration
 * @param n	Number of months (may be fractional or negative)
 * @return A duration of n months
 */
export declare function months(n: number): Duration;
/**
 * Construct a time duration
 * @param n	Number of days (may be fractional or negative)
 * @return A duration of n days
 */
export declare function days(n: number): Duration;
/**
 * Construct a time duration
 * @param n	Number of hours (may be fractional or negative)
 * @return A duration of n hours
 */
export declare function hours(n: number): Duration;
/**
 * Construct a time duration
 * @param n	Number of minutes (may be fractional or negative)
 * @return A duration of n minutes
 */
export declare function minutes(n: number): Duration;
/**
 * Construct a time duration
 * @param n	Number of seconds (may be fractional or negative)
 * @return A duration of n seconds
 */
export declare function seconds(n: number): Duration;
/**
 * Construct a time duration
 * @param n	Number of milliseconds (may be fractional or negative)
 * @return A duration of n milliseconds
 */
export declare function milliseconds(n: number): Duration;
/**
 * Time duration which is represented as an amount and a unit e.g.
 * '1 Month' or '166 Seconds'. The unit is preserved through calculations.
 *
 * It has two sets of getter functions:
 * - second(), minute(), hour() etc, singular form: these can be used to create string representations.
 *   These return a part of your string representation. E.g. for 2500 milliseconds, the millisecond() part would be 500
 * - seconds(), minutes(), hours() etc, plural form: these return the total amount represented in the corresponding unit.
 */
export declare class Duration {
    /**
     * Given amount in constructor
     */
    private _amount;
    /**
     * Unit
     */
    private _unit;
    /**
     * Construct a time duration
     * @param n	Number of years (may be fractional or negative)
     * @return A duration of n years
     */
    static years(n: number): Duration;
    /**
     * Construct a time duration
     * @param n	Number of months (may be fractional or negative)
     * @return A duration of n months
     */
    static months(n: number): Duration;
    /**
     * Construct a time duration
     * @param n	Number of days (may be fractional or negative)
     * @return A duration of n days
     */
    static days(n: number): Duration;
    /**
     * Construct a time duration
     * @param n	Number of hours (may be fractional or negative)
     * @return A duration of n hours
     */
    static hours(n: number): Duration;
    /**
     * Construct a time duration
     * @param n	Number of minutes (may be fractional or negative)
     * @return A duration of n minutes
     */
    static minutes(n: number): Duration;
    /**
     * Construct a time duration
     * @param n	Number of seconds (may be fractional or negative)
     * @return A duration of n seconds
     */
    static seconds(n: number): Duration;
    /**
     * Construct a time duration
     * @param n	Number of milliseconds (may be fractional or negative)
     * @return A duration of n milliseconds
     */
    static milliseconds(n: number): Duration;
    /**
     * Construct a time duration of 0
     */
    constructor();
    /**
     * Construct a time duration from a string in one of two formats:
     * 1) [-]hhhh[:mm[:ss[.nnn]]] e.g. '-01:00:30.501'
     * 2) amount and unit e.g. '-1 days' or '1 year'. The unit may be in singular or plural form and is case-insensitive
     */
    constructor(input: string);
    /**
     * Construct a duration from an amount and a time unit.
     * @param amount	Number of units
     * @param unit	A time unit i.e. TimeUnit.Second, TimeUnit.Hour etc. Default Millisecond.
     */
    constructor(amount: number, unit?: TimeUnit);
    /**
     * @return another instance of Duration with the same value.
     */
    clone(): Duration;
    /**
     * Returns this duration expressed in different unit (positive or negative, fractional).
     * This is precise for Year <-> Month and for time-to-time conversion (i.e. Hour-or-less to Hour-or-less).
     * It is approximate for any other conversion
     */
    as(unit: TimeUnit): number;
    /**
     * Convert this duration to a Duration in another unit. You always get a clone even if you specify
     * the same unit.
     * This is precise for Year <-> Month and for time-to-time conversion (i.e. Hour-or-less to Hour-or-less).
     * It is approximate for any other conversion
     */
    convert(unit: TimeUnit): Duration;
    /**
     * The entire duration in milliseconds (negative or positive)
     * For Day/Month/Year durations, this is approximate!
     */
    milliseconds(): number;
    /**
     * The millisecond part of the duration (always positive)
     * For Day/Month/Year durations, this is approximate!
     * @return e.g. 400 for a -01:02:03.400 duration
     */
    millisecond(): number;
    /**
     * The entire duration in seconds (negative or positive, fractional)
     * For Day/Month/Year durations, this is approximate!
     * @return e.g. 1.5 for a 1500 milliseconds duration
     */
    seconds(): number;
    /**
     * The second part of the duration (always positive)
     * For Day/Month/Year durations, this is approximate!
     * @return e.g. 3 for a -01:02:03.400 duration
     */
    second(): number;
    /**
     * The entire duration in minutes (negative or positive, fractional)
     * For Day/Month/Year durations, this is approximate!
     * @return e.g. 1.5 for a 90000 milliseconds duration
     */
    minutes(): number;
    /**
     * The minute part of the duration (always positive)
     * For Day/Month/Year durations, this is approximate!
     * @return e.g. 2 for a -01:02:03.400 duration
     */
    minute(): number;
    /**
     * The entire duration in hours (negative or positive, fractional)
     * For Day/Month/Year durations, this is approximate!
     * @return e.g. 1.5 for a 5400000 milliseconds duration
     */
    hours(): number;
    /**
     * The hour part of a duration. This assumes that a day has 24 hours (which is not the case
     * during DST changes).
     */
    hour(): number;
    /**
     * The hour part of the duration (always positive).
     * Note that this part can exceed 23 hours, because for
     * now, we do not have a days() function
     * For Day/Month/Year durations, this is approximate!
     * @return e.g. 25 for a -25:02:03.400 duration
     */
    wholeHours(): number;
    /**
     * The entire duration in days (negative or positive, fractional)
     * This is approximate if this duration is not in days!
     */
    days(): number;
    /**
     * The day part of a duration. This assumes that a month has 30 days.
     */
    day(): number;
    /**
     * The entire duration in days (negative or positive, fractional)
     * This is approximate if this duration is not in Months or Years!
     */
    months(): number;
    /**
     * The month part of a duration.
     */
    month(): number;
    /**
     * The entire duration in years (negative or positive, fractional)
     * This is approximate if this duration is not in Months or Years!
     */
    years(): number;
    /**
     * Non-fractional positive years
     */
    wholeYears(): number;
    /**
     * Amount of units (positive or negative, fractional)
     */
    amount(): number;
    /**
     * The unit this duration was created with
     */
    unit(): TimeUnit;
    /**
     * Sign
     * @return "-" if the duration is negative
     */
    sign(): string;
    /**
     * Approximate if the durations have units that cannot be converted
     * @return True iff (this < other)
     */
    lessThan(other: Duration): boolean;
    /**
     * Approximate if the durations have units that cannot be converted
     * @return True iff (this <= other)
     */
    lessEqual(other: Duration): boolean;
    /**
     * Similar but not identical
     * Approximate if the durations have units that cannot be converted
     * @return True iff this and other represent the same time duration
     */
    equals(other: Duration): boolean;
    /**
     * Similar but not identical
     * Returns false if we cannot determine whether they are equal in all time zones
     * so e.g. 60 minutes equals 1 hour, but 24 hours do NOT equal 1 day
     *
     * @return True iff this and other represent the same time duration
     */
    equalsExact(other: Duration): boolean;
    /**
     * Same unit and same amount
     */
    identical(other: Duration): boolean;
    /**
     * Approximate if the durations have units that cannot be converted
     * @return True iff this > other
     */
    greaterThan(other: Duration): boolean;
    /**
     * Approximate if the durations have units that cannot be converted
     * @return True iff this >= other
     */
    greaterEqual(other: Duration): boolean;
    /**
     * Approximate if the durations have units that cannot be converted
     * @return The minimum (most negative) of this and other
     */
    min(other: Duration): Duration;
    /**
     * Approximate if the durations have units that cannot be converted
     * @return The maximum (most positive) of this and other
     */
    max(other: Duration): Duration;
    /**
     * Multiply with a fixed number.
     * Approximate if the durations have units that cannot be converted
     * @return a new Duration of (this * value)
     */
    multiply(value: number): Duration;
    /**
     * Divide by a unitless number. The result is a Duration, e.g. 1 year / 2 = 0.5 year
     * The result is approximate if this duration as a unit that cannot be converted to a number (e.g. 1 month has variable length)
     * @return a new Duration of (this / value)
     */
    divide(value: number): Duration;
    /**
     * Divide this Duration by a Duration. The result is a unitless number e.g. 1 year / 1 month = 12
     * The result is approximate if this duration as a unit that cannot be converted to a number (e.g. 1 month has variable length)
     * @return a new Duration of (this / value)
     */
    divide(value: Duration): number;
    /**
     * Add a duration.
     * @return a new Duration of (this + value) with the unit of this duration
     */
    add(value: Duration): Duration;
    /**
     * Subtract a duration.
     * @return a new Duration of (this - value) with the unit of this duration
     */
    sub(value: Duration): Duration;
    /**
     * Return the absolute value of the duration i.e. remove the sign.
     */
    abs(): Duration;
    /**
     * String in [-]hhhh:mm:ss.nnn notation. All fields are
     * always present except the sign.
     */
    toFullString(): string;
    /**
     * String in [-]hhhh:mm[:ss[.nnn]] notation.
     * @param full If true, then all fields are always present except the sign. Otherwise, seconds and milliseconds
     *             are chopped off if zero
     */
    toHmsString(full?: boolean): string;
    /**
     * String in ISO 8601 notation e.g. 'P1M' for one month or 'PT1M' for one minute
     */
    toIsoString(): string;
    /**
     * String representation with amount and unit e.g. '1.5 years' or '-1 day'
     */
    toString(): string;
    /**
     * Used by util.inspect()
     */
    inspect(): string;
    /**
     * The valueOf() method returns the primitive value of the specified object.
     */
    valueOf(): any;
    /**
     * Return this % unit, always positive
     */
    private _part(unit);
    private _fromString(s);
}
