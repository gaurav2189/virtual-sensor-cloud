import { WeekDay, TimeStruct, TimeUnit } from "./basics";
import { Duration } from "./duration";
import { DateFunctions } from "./javascript";
import { TimeSource } from "./timesource";
import { TimeZone } from "./timezone";
import * as format from "./format";
/**
 * Current date+time in local time
 */
export declare function nowLocal(): DateTime;
/**
 * Current date+time in UTC time
 */
export declare function nowUtc(): DateTime;
/**
 * Current date+time in the given time zone
 * @param timeZone	The desired time zone (optional, defaults to UTC).
 */
export declare function now(timeZone?: TimeZone): DateTime;
/**
 * DateTime class which is time zone-aware
 * and which can be mocked for testing purposes.
 */
export declare class DateTime {
    /**
     * UTC timestamp (lazily calculated)
     */
    private _utcDate;
    private utcDate;
    /**
     * Local timestamp (lazily calculated)
     */
    private _zoneDate;
    private zoneDate;
    /**
     * Original time zone this instance was created for.
     * Can be NULL for unaware timestamps
     */
    private _zone;
    /**
     * Actual time source in use. Setting this property allows to
     * fake time in tests. DateTime.nowLocal() and DateTime.nowUtc()
     * use this property for obtaining the current time.
     */
    static timeSource: TimeSource;
    /**
     * Current date+time in local time
     */
    static nowLocal(): DateTime;
    /**
     * Current date+time in UTC time
     */
    static nowUtc(): DateTime;
    /**
     * Current date+time in the given time zone
     * @param timeZone	The desired time zone (optional, defaults to UTC).
     */
    static now(timeZone?: TimeZone): DateTime;
    /**
     * Create a DateTime from a Lotus 123 / Microsoft Excel date-time value
     * i.e. a double representing days since 1-1-1900 where 1900 is incorrectly seen as leap year
     * Does not work for dates < 1900
     * @param n excel date/time number
     * @param timeZone Time zone to assume that the excel value is in
     * @returns a DateTime
     */
    static fromExcel(n: number, timeZone?: TimeZone): DateTime;
    /**
     * Check whether a given date exists in the given time zone.
     * E.g. 2015-02-29 returns false (not a leap year)
     * and 2015-03-29T02:30:00 returns false (daylight saving time missing hour)
     * and 2015-04-31 returns false (April has 30 days).
     * By default, pre-1970 dates also return false since the time zone database does not contain accurate info
     * before that. You can change that with the allowPre1970 flag.
     *
     * @param allowPre1970 (optional, default false): return true for pre-1970 dates
     */
    static exists(year: number, month?: number, day?: number, hour?: number, minute?: number, second?: number, millisecond?: number, zone?: TimeZone, allowPre1970?: boolean): boolean;
    /**
     * Constructor. Creates current time in local timezone.
     */
    constructor();
    /**
     * Constructor. Parses ISO timestamp string.
     * Non-existing local times are normalized by rounding up to the next DST offset.
     *
     * @param isoString	String in ISO 8601 format. Instead of ISO time zone,
     *		 it may include a space and then and IANA time zone.
     * e.g. "2007-04-05T12:30:40.500"					(no time zone, naive date)
     * e.g. "2007-04-05T12:30:40.500+01:00"				(UTC offset without daylight saving time)
     * or   "2007-04-05T12:30:40.500Z"					(UTC)
     * or   "2007-04-05T12:30:40.500 Europe/Amsterdam"	(IANA time zone, with daylight saving time if applicable)
     * @param timeZone	if given, the date in the string is assumed to be in this time zone.
     *					Note that it is NOT CONVERTED to the time zone. Useful
     *					for strings without a time zone
     */
    constructor(isoString: string, timeZone?: TimeZone);
    /**
     * Constructor. Parses string in given LDML format.
     * NOTE: does not handle eras/quarters/weeks/weekdays.
     * Non-existing local times are normalized by rounding up to the next DST offset.
     *
     * @param dateString	Date+Time string.
     * @param format The LDML format that the string is assumed to be in
     * @param timeZone	if given, the date in the string is assumed to be in this time zone.
     *					Note that it is NOT CONVERTED to the time zone. Useful
     *					for strings without a time zone
     */
    constructor(dateString: string, format: string, timeZone?: TimeZone);
    /**
     * Constructor. You provide a date, then you say whether to take the
     * date.getYear()/getXxx methods or the date.getUTCYear()/date.getUTCXxx methods,
     * and then you state which time zone that date is in.
     * Non-existing local times are normalized by rounding up to the next DST offset.
     * Note that the Date class has bugs and inconsistencies when constructing them with times around
     * DST changes.
     *
     * @param date	A date object.
     * @param getters	Specifies which set of Date getters contains the date in the given time zone: the
     *					Date.getXxx() methods or the Date.getUTCXxx() methods.
     * @param timeZone	The time zone that the given date is assumed to be in (may be null for unaware dates)
     */
    constructor(date: Date, getFuncs: DateFunctions, timeZone?: TimeZone);
    /**
     * Get a date from a TimeStruct
     */
    constructor(tm: TimeStruct, timeZone?: TimeZone);
    /**
     * Constructor. Note that unlike JavaScript dates we require fields to be in normal ranges.
     * Use the add(duration) or sub(duration) for arithmetic.
     * @param year	The full year (e.g. 2014)
     * @param month	The month [1-12] (note this deviates from JavaScript Date)
     * @param day	The day of the month [1-31]
     * @param hour	The hour of the day [0-24)
     * @param minute	The minute of the hour [0-59]
     * @param second	The second of the minute [0-59]
     * @param millisecond	The millisecond of the second [0-999]
     * @param timeZone	The time zone, or null (for unaware dates)
     */
    constructor(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number, timeZone?: TimeZone);
    /**
     * Constructor
     * @param unixTimestamp	milliseconds since 1970-01-01T00:00:00.000
     * @param timeZone	the time zone that the timestamp is assumed to be in (usually UTC).
     */
    constructor(unixTimestamp: number, timeZone?: TimeZone);
    /**
     * @return a copy of this object
     */
    clone(): DateTime;
    /**
     * @return The time zone that the date is in. May be null for unaware dates.
     */
    zone(): TimeZone;
    /**
     * Zone name abbreviation at this time
     * @param dstDependent (default true) set to false for a DST-agnostic abbreviation
     * @return The abbreviation
     */
    zoneAbbreviation(dstDependent?: boolean): string;
    /**
     * @return the offset including DST w.r.t. UTC in minutes. Returns 0 for unaware dates and for UTC dates.
     */
    offset(): number;
    /**
     * @return the offset including DST w.r.t. UTC as a Duration.
     */
    offsetDuration(): Duration;
    /**
     * @return the standard offset WITHOUT DST w.r.t. UTC as a Duration.
     */
    standardOffsetDuration(): Duration;
    /**
     * @return The full year e.g. 2014
     */
    year(): number;
    /**
     * @return The month 1-12 (note this deviates from JavaScript Date)
     */
    month(): number;
    /**
     * @return The day of the month 1-31
     */
    day(): number;
    /**
     * @return The hour 0-23
     */
    hour(): number;
    /**
     * @return the minutes 0-59
     */
    minute(): number;
    /**
     * @return the seconds 0-59
     */
    second(): number;
    /**
     * @return the milliseconds 0-999
     */
    millisecond(): number;
    /**
     * @return the day-of-week (the enum values correspond to JavaScript
     * week day numbers)
     */
    weekDay(): WeekDay;
    /**
     * Returns the day number within the year: Jan 1st has number 0,
     * Jan 2nd has number 1 etc.
     *
     * @return the day-of-year [0-366]
     */
    dayOfYear(): number;
    /**
     * The ISO 8601 week number. Week 1 is the week
     * that has January 4th in it, and it starts on Monday.
     * See https://en.wikipedia.org/wiki/ISO_week_date
     *
     * @return Week number [1-53]
     */
    weekNumber(): number;
    /**
     * The week of this month. There is no official standard for this,
     * but we assume the same rules for the weekNumber (i.e.
     * week 1 is the week that has the 4th day of the month in it)
     *
     * @return Week number [1-5]
     */
    weekOfMonth(): number;
    /**
     * Returns the number of seconds that have passed on the current day
     * Does not consider leap seconds
     *
     * @return seconds [0-86399]
     */
    secondOfDay(): number;
    /**
     * @return Milliseconds since 1970-01-01T00:00:00.000Z
     */
    unixUtcMillis(): number;
    /**
     * @return The full year e.g. 2014
     */
    utcYear(): number;
    /**
     * @return The UTC month 1-12 (note this deviates from JavaScript Date)
     */
    utcMonth(): number;
    /**
     * @return The UTC day of the month 1-31
     */
    utcDay(): number;
    /**
     * @return The UTC hour 0-23
     */
    utcHour(): number;
    /**
     * @return The UTC minutes 0-59
     */
    utcMinute(): number;
    /**
     * @return The UTC seconds 0-59
     */
    utcSecond(): number;
    /**
     * Returns the UTC day number within the year: Jan 1st has number 0,
     * Jan 2nd has number 1 etc.
     *
     * @return the day-of-year [0-366]
     */
    utcDayOfYear(): number;
    /**
     * @return The UTC milliseconds 0-999
     */
    utcMillisecond(): number;
    /**
     * @return the UTC day-of-week (the enum values correspond to JavaScript
     * week day numbers)
     */
    utcWeekDay(): WeekDay;
    /**
     * The ISO 8601 UTC week number. Week 1 is the week
     * that has January 4th in it, and it starts on Monday.
     * See https://en.wikipedia.org/wiki/ISO_week_date
     *
     * @return Week number [1-53]
     */
    utcWeekNumber(): number;
    /**
     * The week of this month. There is no official standard for this,
     * but we assume the same rules for the weekNumber (i.e.
     * week 1 is the week that has the 4th day of the month in it)
     *
     * @return Week number [1-5]
     */
    utcWeekOfMonth(): number;
    /**
     * Returns the number of seconds that have passed on the current day
     * Does not consider leap seconds
     *
     * @return seconds [0-86399]
     */
    utcSecondOfDay(): number;
    /**
     * Returns a new DateTime which is the date+time reinterpreted as
     * in the new zone. So e.g. 08:00 America/Chicago can be set to 08:00 Europe/Brussels.
     * No conversion is done, the value is just assumed to be in a different zone.
     * Works for naive and aware dates. The new zone may be null.
     *
     * @param zone The new time zone
     * @return A new DateTime with the original timestamp and the new zone.
     */
    withZone(zone?: TimeZone): DateTime;
    /**
     * Convert this date to the given time zone (in-place).
     * Throws if this date does not have a time zone.
     * @return this (for chaining)
     */
    convert(zone?: TimeZone): DateTime;
    /**
     * Returns this date converted to the given time zone.
     * Unaware dates can only be converted to unaware dates (clone)
     * Converting an unaware date to an aware date throws an exception. Use the constructor
     * if you really need to do that.
     *
     * @param zone	The new time zone. This may be null to create unaware date.
     * @return The converted date
     */
    toZone(zone?: TimeZone): DateTime;
    /**
     * Convert to JavaScript date with the zone time in the getX() methods.
     * Unless the timezone is local, the Date.getUTCX() methods will NOT be correct.
     * This is because Date calculates getUTCX() from getX() applying local time zone.
     */
    toDate(): Date;
    /**
     * Create an Excel timestamp for this datetime converted to the given zone.
     * Does not work for dates < 1900
     * @param timeZone Optional. Zone to convert to, default the zone the datetime is already in.
     * @return an Excel date/time number i.e. days since 1-1-1900 where 1900 is incorrectly seen as leap year
     */
    toExcel(timeZone?: TimeZone): number;
    /**
     * Create an Excel timestamp for this datetime converted to UTC
     * Does not work for dates < 1900
     * @return an Excel date/time number i.e. days since 1-1-1900 where 1900 is incorrectly seen as leap year
     */
    toUtcExcel(): number;
    private _unixTimeStampToExcel(n);
    /**
     * Add a time duration relative to UTC. Returns a new DateTime
     * @return this + duration
     */
    add(duration: Duration): DateTime;
    /**
     * Add an amount of time relative to UTC, as regularly as possible. Returns a new DateTime
     *
     * Adding e.g. 1 hour will increment the utcHour() field, adding 1 month
     * increments the utcMonth() field.
     * Adding an amount of units leaves lower units intact. E.g.
     * adding a month will leave the day() field untouched if possible.
     *
     * Note adding Months or Years will clamp the date to the end-of-month if
     * the start date was at the end of a month, i.e. contrary to JavaScript
     * Date#setUTCMonth() it will not overflow into the next month
     *
     * In case of DST changes, the utc time fields are still untouched but local
     * time fields may shift.
     */
    add(amount: number, unit: TimeUnit): DateTime;
    /**
     * Add an amount of time to the zone time, as regularly as possible. Returns a new DateTime
     *
     * Adding e.g. 1 hour will increment the hour() field of the zone
     * date by one. In case of DST changes, the time fields may additionally
     * increase by the DST offset, if a non-existing local time would
     * be reached otherwise.
     *
     * Adding a unit of time will leave lower-unit fields intact, unless the result
     * would be a non-existing time. Then an extra DST offset is added.
     *
     * Note adding Months or Years will clamp the date to the end-of-month if
     * the start date was at the end of a month, i.e. contrary to JavaScript
     * Date#setUTCMonth() it will not overflow into the next month
     */
    addLocal(duration: Duration): DateTime;
    addLocal(amount: number, unit: TimeUnit): DateTime;
    /**
     * Add an amount of time to the given time struct. Note: does not normalize.
     * Keeps lower unit fields the same where possible, clamps day to end-of-month if
     * necessary.
     */
    private _addToTimeStruct(tm, amount, unit);
    /**
     * Same as add(-1*duration); Returns a new DateTime
     */
    sub(duration: Duration): DateTime;
    /**
     * Same as add(-1*amount, unit); Returns a new DateTime
     */
    sub(amount: number, unit: TimeUnit): DateTime;
    /**
     * Same as addLocal(-1*amount, unit); Returns a new DateTime
     */
    subLocal(duration: Duration): DateTime;
    subLocal(amount: number, unit: TimeUnit): DateTime;
    /**
     * Time difference between two DateTimes
     * @return this - other
     */
    diff(other: DateTime): Duration;
    /**
    * Chops off the time part, yields the same date at 00:00:00.000
    * @return a new DateTime
    */
    startOfDay(): DateTime;
    /**
     * Returns the first day of the month at 00:00:00
     * @return a new DateTime
     */
    startOfMonth(): DateTime;
    /**
     * Returns the first day of the year at 00:00:00
     * @return a new DateTime
     */
    startOfYear(): DateTime;
    /**
     * @return True iff (this < other)
     */
    lessThan(other: DateTime): boolean;
    /**
     * @return True iff (this <= other)
     */
    lessEqual(other: DateTime): boolean;
    /**
     * @return True iff this and other represent the same moment in time in UTC
     */
    equals(other: DateTime): boolean;
    /**
     * @return True iff this and other represent the same time and the same zone
     */
    identical(other: DateTime): boolean;
    /**
     * @return True iff this > other
     */
    greaterThan(other: DateTime): boolean;
    /**
     * @return True iff this >= other
     */
    greaterEqual(other: DateTime): boolean;
    /**
     * @return The minimum of this and other
     */
    min(other: DateTime): DateTime;
    /**
     * @return The maximum of this and other
     */
    max(other: DateTime): DateTime;
    /**
     * Proper ISO 8601 format string with any IANA zone converted to ISO offset
     * E.g. "2014-01-01T23:15:33+01:00" for Europe/Amsterdam
     */
    toIsoString(): string;
    /**
     * Return a string representation of the DateTime according to the
     * specified format. The format is implemented as the LDML standard
     * (http://unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns)
     *
     * @param formatString The format specification (e.g. "dd/MM/yyyy HH:mm:ss")
     * @param formatOptions Optional, non-english format month names etc.
     * @return The string representation of this DateTime
     */
    format(formatString: string, formatOptions?: format.FormatOptions): string;
    /**
     * Parse a date in a given format
     * @param s the string to parse
     * @param format the format the string is in
     * @param zone Optional, the zone to add (if no zone is given in the string)
     */
    static parse(s: string, format: string, zone?: TimeZone): DateTime;
    /**
     * Modified ISO 8601 format string with IANA name if applicable.
     * E.g. "2014-01-01T23:15:33.000 Europe/Amsterdam"
     */
    toString(): string;
    /**
     * Used by util.inspect()
     */
    inspect(): string;
    /**
     * The valueOf() method returns the primitive value of the specified object.
     */
    valueOf(): any;
    /**
     * Modified ISO 8601 format string in UTC without time zone info
     */
    toUtcString(): string;
    /**
     * Split a combined ISO datetime and timezone into datetime and timezone
     */
    private static _splitDateFromTimeZone(s);
}
